
LedDimming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000892  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a8  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <init>:
#include <avr/io.h>
#define F_CPU 16000000
#include <util/delay.h>

void init(uint8_t mode){
	if(mode == FAST){
  84:	81 11       	cpse	r24, r1
  86:	05 c0       	rjmp	.+10     	; 0x92 <init+0xe>
		TCCR0B = 0b00000010;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	85 bd       	out	0x25, r24	; 37
		TCCR0A = 0b10000011;
  8c:	83 e8       	ldi	r24, 0x83	; 131
  8e:	84 bd       	out	0x24, r24	; 36
  90:	06 c0       	rjmp	.+12     	; 0x9e <init+0x1a>
	}else if (mode == PHASE_CORRECT){
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	21 f4       	brne	.+8      	; 0x9e <init+0x1a>
		TCCR0B = 0b00000010;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	85 bd       	out	0x25, r24	; 37
		TCCR0A = 0b10000001;
  9a:	81 e8       	ldi	r24, 0x81	; 129
  9c:	84 bd       	out	0x24, r24	; 36
	}else{};
	//OCR0A = 0x7f;
	DDRD = 1 << DDRD6;
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	08 95       	ret

000000a4 <set_duty>:

void set_duty(uint8_t duty){
	if (duty > 100){
		duty = 100;
	}
	OCR0A = (duty * 255) / 100;
  a4:	85 36       	cpi	r24, 0x65	; 101
  a6:	08 f0       	brcs	.+2      	; 0xaa <set_duty+0x6>
  a8:	84 e6       	ldi	r24, 0x64	; 100
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	82 9f       	mul	r24, r18
  ae:	c0 01       	movw	r24, r0
  b0:	11 24       	eor	r1, r1
  b2:	64 e6       	ldi	r22, 0x64	; 100
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	0e 94 82 00 	call	0x104	; 0x104 <__divmodhi4>
  ba:	67 bd       	out	0x27, r22	; 39
	OCR0B = 0b00001111;
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	88 bd       	out	0x28, r24	; 40
  c0:	08 95       	ret

000000c2 <main>:
}


int main(void)
{
    init(PHASE_CORRECT);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 42 00 	call	0x84	; 0x84 <init>
	uint8_t duty = 0;
	
    while (1) 
    {
		set_duty(duty);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 52 00 	call	0xa4	; 0xa4 <set_duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	81 ee       	ldi	r24, 0xE1	; 225
  d2:	94 e0       	ldi	r25, 0x04	; 4
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x12>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x1c>
  de:	00 00       	nop
	    _delay_ms(100);
	    
	    duty += 5;
  e0:	c5 e0       	ldi	r28, 0x05	; 5
    init(PHASE_CORRECT);
	uint8_t duty = 0;
	
    while (1) 
    {
		set_duty(duty);
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 52 00 	call	0xa4	; 0xa4 <set_duty>
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x2c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x36>
  f8:	00 00       	nop
	    _delay_ms(100);
	    
	    duty += 5;
  fa:	cb 5f       	subi	r28, 0xFB	; 251
	    if(duty > 100){
  fc:	c5 36       	cpi	r28, 0x65	; 101
  fe:	88 f3       	brcs	.-30     	; 0xe2 <main+0x20>
		    duty = 0;
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	ef cf       	rjmp	.-34     	; 0xe2 <main+0x20>

00000104 <__divmodhi4>:
 104:	97 fb       	bst	r25, 7
 106:	07 2e       	mov	r0, r23
 108:	16 f4       	brtc	.+4      	; 0x10e <__divmodhi4+0xa>
 10a:	00 94       	com	r0
 10c:	07 d0       	rcall	.+14     	; 0x11c <__divmodhi4_neg1>
 10e:	77 fd       	sbrc	r23, 7
 110:	09 d0       	rcall	.+18     	; 0x124 <__divmodhi4_neg2>
 112:	0e 94 96 00 	call	0x12c	; 0x12c <__udivmodhi4>
 116:	07 fc       	sbrc	r0, 7
 118:	05 d0       	rcall	.+10     	; 0x124 <__divmodhi4_neg2>
 11a:	3e f4       	brtc	.+14     	; 0x12a <__divmodhi4_exit>

0000011c <__divmodhi4_neg1>:
 11c:	90 95       	com	r25
 11e:	81 95       	neg	r24
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	08 95       	ret

00000124 <__divmodhi4_neg2>:
 124:	70 95       	com	r23
 126:	61 95       	neg	r22
 128:	7f 4f       	sbci	r23, 0xFF	; 255

0000012a <__divmodhi4_exit>:
 12a:	08 95       	ret

0000012c <__udivmodhi4>:
 12c:	aa 1b       	sub	r26, r26
 12e:	bb 1b       	sub	r27, r27
 130:	51 e1       	ldi	r21, 0x11	; 17
 132:	07 c0       	rjmp	.+14     	; 0x142 <__udivmodhi4_ep>

00000134 <__udivmodhi4_loop>:
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	a6 17       	cp	r26, r22
 13a:	b7 07       	cpc	r27, r23
 13c:	10 f0       	brcs	.+4      	; 0x142 <__udivmodhi4_ep>
 13e:	a6 1b       	sub	r26, r22
 140:	b7 0b       	sbc	r27, r23

00000142 <__udivmodhi4_ep>:
 142:	88 1f       	adc	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	5a 95       	dec	r21
 148:	a9 f7       	brne	.-22     	; 0x134 <__udivmodhi4_loop>
 14a:	80 95       	com	r24
 14c:	90 95       	com	r25
 14e:	bc 01       	movw	r22, r24
 150:	cd 01       	movw	r24, r26
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
