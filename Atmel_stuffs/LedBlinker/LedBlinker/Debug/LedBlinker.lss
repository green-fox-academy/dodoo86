
LedBlinker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000652  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000652  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b92  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ea  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060a  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000440  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f3  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  60:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  68:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 e5       	ldi	r30, 0x52	; 82
  80:	f6 e0       	ldi	r31, 0x06	; 6
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>
  8e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  92:	0c 94 27 03 	jmp	0x64e	; 0x64e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <custom_delay>:
			*flag= 1;
		}
	}
}

void custom_delay(int ms){
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	62 97       	sbiw	r28, 0x12	; 18
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
  ae:	9a 8b       	std	Y+18, r25	; 0x12
  b0:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i < ms; i++){
  b2:	1a 82       	std	Y+2, r1	; 0x02
  b4:	19 82       	std	Y+1, r1	; 0x01
  b6:	77 c0       	rjmp	.+238    	; 0x1a6 <custom_delay+0x10c>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	a0 e8       	ldi	r26, 0x80	; 128
  be:	bf e3       	ldi	r27, 0x3F	; 63
  c0:	8b 83       	std	Y+3, r24	; 0x03
  c2:	9c 83       	std	Y+4, r25	; 0x04
  c4:	ad 83       	std	Y+5, r26	; 0x05
  c6:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	4a e7       	ldi	r20, 0x7A	; 122
  ce:	55 e4       	ldi	r21, 0x45	; 69
  d0:	6b 81       	ldd	r22, Y+3	; 0x03
  d2:	7c 81       	ldd	r23, Y+4	; 0x04
  d4:	8d 81       	ldd	r24, Y+5	; 0x05
  d6:	9e 81       	ldd	r25, Y+6	; 0x06
  d8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__mulsf3>
  dc:	dc 01       	movw	r26, r24
  de:	cb 01       	movw	r24, r22
  e0:	8f 83       	std	Y+7, r24	; 0x07
  e2:	98 87       	std	Y+8, r25	; 0x08
  e4:	a9 87       	std	Y+9, r26	; 0x09
  e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	40 e8       	ldi	r20, 0x80	; 128
  ee:	5f e3       	ldi	r21, 0x3F	; 63
  f0:	6f 81       	ldd	r22, Y+7	; 0x07
  f2:	78 85       	ldd	r23, Y+8	; 0x08
  f4:	89 85       	ldd	r24, Y+9	; 0x09
  f6:	9a 85       	ldd	r25, Y+10	; 0x0a
  f8:	0e 94 cb 01 	call	0x396	; 0x396 <__cmpsf2>
  fc:	88 23       	and	r24, r24
  fe:	2c f4       	brge	.+10     	; 0x10a <custom_delay+0x70>
		__ticks = 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	9c 87       	std	Y+12, r25	; 0x0c
 106:	8b 87       	std	Y+11, r24	; 0x0b
 108:	3f c0       	rjmp	.+126    	; 0x188 <custom_delay+0xee>
	else if (__tmp > 65535)
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	3f ef       	ldi	r19, 0xFF	; 255
 10e:	4f e7       	ldi	r20, 0x7F	; 127
 110:	57 e4       	ldi	r21, 0x47	; 71
 112:	6f 81       	ldd	r22, Y+7	; 0x07
 114:	78 85       	ldd	r23, Y+8	; 0x08
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	0e 94 4c 02 	call	0x498	; 0x498 <__gesf2>
 11e:	18 16       	cp	r1, r24
 120:	4c f5       	brge	.+82     	; 0x174 <custom_delay+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e2       	ldi	r20, 0x20	; 32
 128:	51 e4       	ldi	r21, 0x41	; 65
 12a:	6b 81       	ldd	r22, Y+3	; 0x03
 12c:	7c 81       	ldd	r23, Y+4	; 0x04
 12e:	8d 81       	ldd	r24, Y+5	; 0x05
 130:	9e 81       	ldd	r25, Y+6	; 0x06
 132:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__mulsf3>
 136:	dc 01       	movw	r26, r24
 138:	cb 01       	movw	r24, r22
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 142:	dc 01       	movw	r26, r24
 144:	cb 01       	movw	r24, r22
 146:	9c 87       	std	Y+12, r25	; 0x0c
 148:	8b 87       	std	Y+11, r24	; 0x0b
 14a:	0f c0       	rjmp	.+30     	; 0x16a <custom_delay+0xd0>
 14c:	80 e9       	ldi	r24, 0x90	; 144
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	9e 87       	std	Y+14, r25	; 0x0e
 152:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 154:	8d 85       	ldd	r24, Y+13	; 0x0d
 156:	9e 85       	ldd	r25, Y+14	; 0x0e
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <custom_delay+0xbe>
 15c:	9e 87       	std	Y+14, r25	; 0x0e
 15e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	8b 85       	ldd	r24, Y+11	; 0x0b
 162:	9c 85       	ldd	r25, Y+12	; 0x0c
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	9c 87       	std	Y+12, r25	; 0x0c
 168:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	8b 85       	ldd	r24, Y+11	; 0x0b
 16c:	9c 85       	ldd	r25, Y+12	; 0x0c
 16e:	89 2b       	or	r24, r25
 170:	69 f7       	brne	.-38     	; 0x14c <custom_delay+0xb2>
 172:	14 c0       	rjmp	.+40     	; 0x19c <custom_delay+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 174:	6f 81       	ldd	r22, Y+7	; 0x07
 176:	78 85       	ldd	r23, Y+8	; 0x08
 178:	89 85       	ldd	r24, Y+9	; 0x09
 17a:	9a 85       	ldd	r25, Y+10	; 0x0a
 17c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
 180:	dc 01       	movw	r26, r24
 182:	cb 01       	movw	r24, r22
 184:	9c 87       	std	Y+12, r25	; 0x0c
 186:	8b 87       	std	Y+11, r24	; 0x0b
 188:	8b 85       	ldd	r24, Y+11	; 0x0b
 18a:	9c 85       	ldd	r25, Y+12	; 0x0c
 18c:	98 8b       	std	Y+16, r25	; 0x10
 18e:	8f 87       	std	Y+15, r24	; 0x0f
 190:	8f 85       	ldd	r24, Y+15	; 0x0f
 192:	98 89       	ldd	r25, Y+16	; 0x10
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <custom_delay+0xfa>
 198:	98 8b       	std	Y+16, r25	; 0x10
 19a:	8f 87       	std	Y+15, r24	; 0x0f
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	9a 81       	ldd	r25, Y+2	; 0x02
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	89 83       	std	Y+1, r24	; 0x01
 1a6:	29 81       	ldd	r18, Y+1	; 0x01
 1a8:	3a 81       	ldd	r19, Y+2	; 0x02
 1aa:	89 89       	ldd	r24, Y+17	; 0x11
 1ac:	9a 89       	ldd	r25, Y+18	; 0x12
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	0c f4       	brge	.+2      	; 0x1b6 <custom_delay+0x11c>
 1b4:	81 cf       	rjmp	.-254    	; 0xb8 <custom_delay+0x1e>
		_delay_ms(1);
	}
}
 1b6:	00 00       	nop
 1b8:	62 96       	adiw	r28, 0x12	; 18
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <blink>:

void blink(int mherz){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <blink+0x6>
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <blink+0x8>
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	9c 83       	std	Y+4, r25	; 0x04
 1d8:	8b 83       	std	Y+3, r24	; 0x03

	int delay_time = 500000 / mherz;
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	9c 01       	movw	r18, r24
 1e0:	99 0f       	add	r25, r25
 1e2:	44 0b       	sbc	r20, r20
 1e4:	55 0b       	sbc	r21, r21
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	91 ea       	ldi	r25, 0xA1	; 161
 1ea:	a7 e0       	ldi	r26, 0x07	; 7
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	bc 01       	movw	r22, r24
 1f0:	cd 01       	movw	r24, r26
 1f2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divmodsi4>
 1f6:	da 01       	movw	r26, r20
 1f8:	c9 01       	movw	r24, r18
 1fa:	9a 83       	std	Y+2, r25	; 0x02
 1fc:	89 83       	std	Y+1, r24	; 0x01

	PORTB = 1 << 5;
 1fe:	85 e2       	ldi	r24, 0x25	; 37
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	20 e2       	ldi	r18, 0x20	; 32
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
	custom_delay(delay_time);
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTB = 0 << 5;
 210:	85 e2       	ldi	r24, 0x25	; 37
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	10 82       	st	Z, r1
	custom_delay(delay_time);
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
}
 220:	00 00       	nop
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <blinkk>:

void blinkk(int mherz){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <blinkk+0x6>
 236:	00 d0       	rcall	.+0      	; 0x238 <blinkk+0x8>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	9c 83       	std	Y+4, r25	; 0x04
 23e:	8b 83       	std	Y+3, r24	; 0x03

	int delay_time = 500000 / mherz;
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	9c 01       	movw	r18, r24
 246:	99 0f       	add	r25, r25
 248:	44 0b       	sbc	r20, r20
 24a:	55 0b       	sbc	r21, r21
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	91 ea       	ldi	r25, 0xA1	; 161
 250:	a7 e0       	ldi	r26, 0x07	; 7
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	bc 01       	movw	r22, r24
 256:	cd 01       	movw	r24, r26
 258:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__divmodsi4>
 25c:	da 01       	movw	r26, r20
 25e:	c9 01       	movw	r24, r18
 260:	9a 83       	std	Y+2, r25	; 0x02
 262:	89 83       	std	Y+1, r24	; 0x01

	PORTD = 1 << 3;
 264:	8b e2       	ldi	r24, 0x2B	; 43
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	28 e0       	ldi	r18, 0x08	; 8
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
	custom_delay(delay_time);
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTD = 0 << 3;
 276:	8b e2       	ldi	r24, 0x2B	; 43
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	10 82       	st	Z, r1
	custom_delay(delay_time);
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTD = 1 << 2;
 286:	8b e2       	ldi	r24, 0x2B	; 43
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	24 e0       	ldi	r18, 0x04	; 4
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
	custom_delay(delay_time);
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTD = 0 << 2;
 298:	8b e2       	ldi	r24, 0x2B	; 43
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	10 82       	st	Z, r1
	custom_delay(delay_time);
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTD = 1 << 1;
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	22 e0       	ldi	r18, 0x02	; 2
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
	custom_delay(delay_time);
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	9a 81       	ldd	r25, Y+2	; 0x02
 2b6:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTD = 0 << 1;
 2ba:	8b e2       	ldi	r24, 0x2B	; 43
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	10 82       	st	Z, r1
	custom_delay(delay_time);
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTD = 1 << 0;
 2ca:	8b e2       	ldi	r24, 0x2B	; 43
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
	custom_delay(delay_time);
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	9a 81       	ldd	r25, Y+2	; 0x02
 2d8:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
	PORTD = 0 << 0;
 2dc:	8b e2       	ldi	r24, 0x2B	; 43
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	10 82       	st	Z, r1
	custom_delay(delay_time);
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	9a 81       	ldd	r25, Y+2	; 0x02
 2e8:	0e 94 4d 00 	call	0x9a	; 0x9a <custom_delay>
}
 2ec:	00 00       	nop
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <main>:

int main(void)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	2e 97       	sbiw	r28, 0x0e	; 14
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b00001111;
 310:	8a e2       	ldi	r24, 0x2A	; 42
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	2f e0       	ldi	r18, 0x0F	; 15
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
	PORTD = 0b00001111;
 31a:	8b e2       	ldi	r24, 0x2B	; 43
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	2f e0       	ldi	r18, 0x0F	; 15
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18

	DDRB = 1 << 5;
 324:	84 e2       	ldi	r24, 0x24	; 36
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	20 e2       	ldi	r18, 0x20	; 32
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
	//uint8_t on = 0;
	int frequ[6] = {500000,1000000,2000000,4000000,2000000,1000000};
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	e0 e0       	ldi	r30, 0x00	; 0
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	de 01       	movw	r26, r28
 336:	13 96       	adiw	r26, 0x03	; 3
 338:	01 90       	ld	r0, Z+
 33a:	0d 92       	st	X+, r0
 33c:	8a 95       	dec	r24
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x3c>
	{
		//toggle(&on);
		//toggleLed(&on);
		//blinkingLed(&on);

		for (int j = 0; j < 6; j++){
 340:	1a 82       	std	Y+2, r1	; 0x02
 342:	19 82       	std	Y+1, r1	; 0x01
 344:	23 c0       	rjmp	.+70     	; 0x38c <main+0x90>
			//for (int i = 0; i< 3; i++){
				blink(frequ[j]);
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	9e 01       	movw	r18, r28
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	82 0f       	add	r24, r18
 356:	93 1f       	adc	r25, r19
 358:	02 96       	adiw	r24, 0x02	; 2
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	91 81       	ldd	r25, Z+1	; 0x01
 360:	0e 94 e5 00 	call	0x1ca	; 0x1ca <blink>
				blinkk(frequ[j]);
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	9a 81       	ldd	r25, Y+2	; 0x02
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	9e 01       	movw	r18, r28
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	3f 4f       	sbci	r19, 0xFF	; 255
 372:	82 0f       	add	r24, r18
 374:	93 1f       	adc	r25, r19
 376:	02 96       	adiw	r24, 0x02	; 2
 378:	fc 01       	movw	r30, r24
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	0e 94 18 01 	call	0x230	; 0x230 <blinkk>
	{
		//toggle(&on);
		//toggleLed(&on);
		//blinkingLed(&on);

		for (int j = 0; j < 6; j++){
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	9a 81       	ldd	r25, Y+2	; 0x02
 390:	06 97       	sbiw	r24, 0x06	; 6
 392:	cc f2       	brlt	.-78     	; 0x346 <main+0x4a>
				blinkk(frequ[j]);
			}
		//}
		{
		}
	}
 394:	d5 cf       	rjmp	.-86     	; 0x340 <main+0x44>

00000396 <__cmpsf2>:
 396:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__fp_cmp>
 39a:	08 f4       	brcc	.+2      	; 0x39e <__cmpsf2+0x8>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	08 95       	ret

000003a0 <__fixunssfsi>:
 3a0:	0e 94 2b 02 	call	0x456	; 0x456 <__fp_splitA>
 3a4:	88 f0       	brcs	.+34     	; 0x3c8 <__fixunssfsi+0x28>
 3a6:	9f 57       	subi	r25, 0x7F	; 127
 3a8:	98 f0       	brcs	.+38     	; 0x3d0 <__fixunssfsi+0x30>
 3aa:	b9 2f       	mov	r27, r25
 3ac:	99 27       	eor	r25, r25
 3ae:	b7 51       	subi	r27, 0x17	; 23
 3b0:	b0 f0       	brcs	.+44     	; 0x3de <__fixunssfsi+0x3e>
 3b2:	e1 f0       	breq	.+56     	; 0x3ec <__fixunssfsi+0x4c>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	1a f0       	brmi	.+6      	; 0x3c4 <__fixunssfsi+0x24>
 3be:	ba 95       	dec	r27
 3c0:	c9 f7       	brne	.-14     	; 0x3b4 <__fixunssfsi+0x14>
 3c2:	14 c0       	rjmp	.+40     	; 0x3ec <__fixunssfsi+0x4c>
 3c4:	b1 30       	cpi	r27, 0x01	; 1
 3c6:	91 f0       	breq	.+36     	; 0x3ec <__fixunssfsi+0x4c>
 3c8:	0e 94 45 02 	call	0x48a	; 0x48a <__fp_zero>
 3cc:	b1 e0       	ldi	r27, 0x01	; 1
 3ce:	08 95       	ret
 3d0:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_zero>
 3d4:	67 2f       	mov	r22, r23
 3d6:	78 2f       	mov	r23, r24
 3d8:	88 27       	eor	r24, r24
 3da:	b8 5f       	subi	r27, 0xF8	; 248
 3dc:	39 f0       	breq	.+14     	; 0x3ec <__fixunssfsi+0x4c>
 3de:	b9 3f       	cpi	r27, 0xF9	; 249
 3e0:	cc f3       	brlt	.-14     	; 0x3d4 <__fixunssfsi+0x34>
 3e2:	86 95       	lsr	r24
 3e4:	77 95       	ror	r23
 3e6:	67 95       	ror	r22
 3e8:	b3 95       	inc	r27
 3ea:	d9 f7       	brne	.-10     	; 0x3e2 <__fixunssfsi+0x42>
 3ec:	3e f4       	brtc	.+14     	; 0x3fc <__fixunssfsi+0x5c>
 3ee:	90 95       	com	r25
 3f0:	80 95       	com	r24
 3f2:	70 95       	com	r23
 3f4:	61 95       	neg	r22
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	8f 4f       	sbci	r24, 0xFF	; 255
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	08 95       	ret

000003fe <__fp_cmp>:
 3fe:	99 0f       	add	r25, r25
 400:	00 08       	sbc	r0, r0
 402:	55 0f       	add	r21, r21
 404:	aa 0b       	sbc	r26, r26
 406:	e0 e8       	ldi	r30, 0x80	; 128
 408:	fe ef       	ldi	r31, 0xFE	; 254
 40a:	16 16       	cp	r1, r22
 40c:	17 06       	cpc	r1, r23
 40e:	e8 07       	cpc	r30, r24
 410:	f9 07       	cpc	r31, r25
 412:	c0 f0       	brcs	.+48     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 414:	12 16       	cp	r1, r18
 416:	13 06       	cpc	r1, r19
 418:	e4 07       	cpc	r30, r20
 41a:	f5 07       	cpc	r31, r21
 41c:	98 f0       	brcs	.+38     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 41e:	62 1b       	sub	r22, r18
 420:	73 0b       	sbc	r23, r19
 422:	84 0b       	sbc	r24, r20
 424:	95 0b       	sbc	r25, r21
 426:	39 f4       	brne	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 428:	0a 26       	eor	r0, r26
 42a:	61 f0       	breq	.+24     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 42c:	23 2b       	or	r18, r19
 42e:	24 2b       	or	r18, r20
 430:	25 2b       	or	r18, r21
 432:	21 f4       	brne	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 434:	08 95       	ret
 436:	0a 26       	eor	r0, r26
 438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	a1 40       	sbci	r26, 0x01	; 1
 43c:	a6 95       	lsr	r26
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	81 1d       	adc	r24, r1
 442:	81 1d       	adc	r24, r1
 444:	08 95       	ret

00000446 <__fp_split3>:
 446:	57 fd       	sbrc	r21, 7
 448:	90 58       	subi	r25, 0x80	; 128
 44a:	44 0f       	add	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	59 f0       	breq	.+22     	; 0x466 <__fp_splitA+0x10>
 450:	5f 3f       	cpi	r21, 0xFF	; 255
 452:	71 f0       	breq	.+28     	; 0x470 <__fp_splitA+0x1a>
 454:	47 95       	ror	r20

00000456 <__fp_splitA>:
 456:	88 0f       	add	r24, r24
 458:	97 fb       	bst	r25, 7
 45a:	99 1f       	adc	r25, r25
 45c:	61 f0       	breq	.+24     	; 0x476 <__fp_splitA+0x20>
 45e:	9f 3f       	cpi	r25, 0xFF	; 255
 460:	79 f0       	breq	.+30     	; 0x480 <__fp_splitA+0x2a>
 462:	87 95       	ror	r24
 464:	08 95       	ret
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	55 1f       	adc	r21, r21
 46e:	f2 cf       	rjmp	.-28     	; 0x454 <__fp_split3+0xe>
 470:	46 95       	lsr	r20
 472:	f1 df       	rcall	.-30     	; 0x456 <__fp_splitA>
 474:	08 c0       	rjmp	.+16     	; 0x486 <__fp_splitA+0x30>
 476:	16 16       	cp	r1, r22
 478:	17 06       	cpc	r1, r23
 47a:	18 06       	cpc	r1, r24
 47c:	99 1f       	adc	r25, r25
 47e:	f1 cf       	rjmp	.-30     	; 0x462 <__fp_splitA+0xc>
 480:	86 95       	lsr	r24
 482:	71 05       	cpc	r23, r1
 484:	61 05       	cpc	r22, r1
 486:	08 94       	sec
 488:	08 95       	ret

0000048a <__fp_zero>:
 48a:	e8 94       	clt

0000048c <__fp_szero>:
 48c:	bb 27       	eor	r27, r27
 48e:	66 27       	eor	r22, r22
 490:	77 27       	eor	r23, r23
 492:	cb 01       	movw	r24, r22
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret

00000498 <__gesf2>:
 498:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__fp_cmp>
 49c:	08 f4       	brcc	.+2      	; 0x4a0 <__gesf2+0x8>
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <__mulsf3>:
 4a2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__mulsf3x>
 4a6:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__fp_round>
 4aa:	0e 94 c7 02 	call	0x58e	; 0x58e <__fp_pscA>
 4ae:	38 f0       	brcs	.+14     	; 0x4be <__mulsf3+0x1c>
 4b0:	0e 94 ce 02 	call	0x59c	; 0x59c <__fp_pscB>
 4b4:	20 f0       	brcs	.+8      	; 0x4be <__mulsf3+0x1c>
 4b6:	95 23       	and	r25, r21
 4b8:	11 f0       	breq	.+4      	; 0x4be <__mulsf3+0x1c>
 4ba:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_inf>
 4be:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_nan>
 4c2:	11 24       	eor	r1, r1
 4c4:	0c 94 46 02 	jmp	0x48c	; 0x48c <__fp_szero>

000004c8 <__mulsf3x>:
 4c8:	0e 94 23 02 	call	0x446	; 0x446 <__fp_split3>
 4cc:	70 f3       	brcs	.-36     	; 0x4aa <__mulsf3+0x8>

000004ce <__mulsf3_pse>:
 4ce:	95 9f       	mul	r25, r21
 4d0:	c1 f3       	breq	.-16     	; 0x4c2 <__mulsf3+0x20>
 4d2:	95 0f       	add	r25, r21
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	55 1f       	adc	r21, r21
 4d8:	62 9f       	mul	r22, r18
 4da:	f0 01       	movw	r30, r0
 4dc:	72 9f       	mul	r23, r18
 4de:	bb 27       	eor	r27, r27
 4e0:	f0 0d       	add	r31, r0
 4e2:	b1 1d       	adc	r27, r1
 4e4:	63 9f       	mul	r22, r19
 4e6:	aa 27       	eor	r26, r26
 4e8:	f0 0d       	add	r31, r0
 4ea:	b1 1d       	adc	r27, r1
 4ec:	aa 1f       	adc	r26, r26
 4ee:	64 9f       	mul	r22, r20
 4f0:	66 27       	eor	r22, r22
 4f2:	b0 0d       	add	r27, r0
 4f4:	a1 1d       	adc	r26, r1
 4f6:	66 1f       	adc	r22, r22
 4f8:	82 9f       	mul	r24, r18
 4fa:	22 27       	eor	r18, r18
 4fc:	b0 0d       	add	r27, r0
 4fe:	a1 1d       	adc	r26, r1
 500:	62 1f       	adc	r22, r18
 502:	73 9f       	mul	r23, r19
 504:	b0 0d       	add	r27, r0
 506:	a1 1d       	adc	r26, r1
 508:	62 1f       	adc	r22, r18
 50a:	83 9f       	mul	r24, r19
 50c:	a0 0d       	add	r26, r0
 50e:	61 1d       	adc	r22, r1
 510:	22 1f       	adc	r18, r18
 512:	74 9f       	mul	r23, r20
 514:	33 27       	eor	r19, r19
 516:	a0 0d       	add	r26, r0
 518:	61 1d       	adc	r22, r1
 51a:	23 1f       	adc	r18, r19
 51c:	84 9f       	mul	r24, r20
 51e:	60 0d       	add	r22, r0
 520:	21 1d       	adc	r18, r1
 522:	82 2f       	mov	r24, r18
 524:	76 2f       	mov	r23, r22
 526:	6a 2f       	mov	r22, r26
 528:	11 24       	eor	r1, r1
 52a:	9f 57       	subi	r25, 0x7F	; 127
 52c:	50 40       	sbci	r21, 0x00	; 0
 52e:	9a f0       	brmi	.+38     	; 0x556 <__stack+0x57>
 530:	f1 f0       	breq	.+60     	; 0x56e <__stack+0x6f>
 532:	88 23       	and	r24, r24
 534:	4a f0       	brmi	.+18     	; 0x548 <__stack+0x49>
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	bb 1f       	adc	r27, r27
 53c:	66 1f       	adc	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	91 50       	subi	r25, 0x01	; 1
 544:	50 40       	sbci	r21, 0x00	; 0
 546:	a9 f7       	brne	.-22     	; 0x532 <__stack+0x33>
 548:	9e 3f       	cpi	r25, 0xFE	; 254
 54a:	51 05       	cpc	r21, r1
 54c:	80 f0       	brcs	.+32     	; 0x56e <__stack+0x6f>
 54e:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_inf>
 552:	0c 94 46 02 	jmp	0x48c	; 0x48c <__fp_szero>
 556:	5f 3f       	cpi	r21, 0xFF	; 255
 558:	e4 f3       	brlt	.-8      	; 0x552 <__stack+0x53>
 55a:	98 3e       	cpi	r25, 0xE8	; 232
 55c:	d4 f3       	brlt	.-12     	; 0x552 <__stack+0x53>
 55e:	86 95       	lsr	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b7 95       	ror	r27
 566:	f7 95       	ror	r31
 568:	e7 95       	ror	r30
 56a:	9f 5f       	subi	r25, 0xFF	; 255
 56c:	c1 f7       	brne	.-16     	; 0x55e <__stack+0x5f>
 56e:	fe 2b       	or	r31, r30
 570:	88 0f       	add	r24, r24
 572:	91 1d       	adc	r25, r1
 574:	96 95       	lsr	r25
 576:	87 95       	ror	r24
 578:	97 f9       	bld	r25, 7
 57a:	08 95       	ret

0000057c <__fp_inf>:
 57c:	97 f9       	bld	r25, 7
 57e:	9f 67       	ori	r25, 0x7F	; 127
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	08 95       	ret

00000588 <__fp_nan>:
 588:	9f ef       	ldi	r25, 0xFF	; 255
 58a:	80 ec       	ldi	r24, 0xC0	; 192
 58c:	08 95       	ret

0000058e <__fp_pscA>:
 58e:	00 24       	eor	r0, r0
 590:	0a 94       	dec	r0
 592:	16 16       	cp	r1, r22
 594:	17 06       	cpc	r1, r23
 596:	18 06       	cpc	r1, r24
 598:	09 06       	cpc	r0, r25
 59a:	08 95       	ret

0000059c <__fp_pscB>:
 59c:	00 24       	eor	r0, r0
 59e:	0a 94       	dec	r0
 5a0:	12 16       	cp	r1, r18
 5a2:	13 06       	cpc	r1, r19
 5a4:	14 06       	cpc	r1, r20
 5a6:	05 06       	cpc	r0, r21
 5a8:	08 95       	ret

000005aa <__fp_round>:
 5aa:	09 2e       	mov	r0, r25
 5ac:	03 94       	inc	r0
 5ae:	00 0c       	add	r0, r0
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__fp_round+0xc>
 5b2:	88 23       	and	r24, r24
 5b4:	52 f0       	brmi	.+20     	; 0x5ca <__fp_round+0x20>
 5b6:	bb 0f       	add	r27, r27
 5b8:	40 f4       	brcc	.+16     	; 0x5ca <__fp_round+0x20>
 5ba:	bf 2b       	or	r27, r31
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__fp_round+0x18>
 5be:	60 ff       	sbrs	r22, 0
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <__fp_round+0x20>
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	08 95       	ret

000005cc <__divmodsi4>:
 5cc:	05 2e       	mov	r0, r21
 5ce:	97 fb       	bst	r25, 7
 5d0:	1e f4       	brtc	.+6      	; 0x5d8 <__divmodsi4+0xc>
 5d2:	00 94       	com	r0
 5d4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__negsi2>
 5d8:	57 fd       	sbrc	r21, 7
 5da:	07 d0       	rcall	.+14     	; 0x5ea <__divmodsi4_neg2>
 5dc:	0e 94 05 03 	call	0x60a	; 0x60a <__udivmodsi4>
 5e0:	07 fc       	sbrc	r0, 7
 5e2:	03 d0       	rcall	.+6      	; 0x5ea <__divmodsi4_neg2>
 5e4:	4e f4       	brtc	.+18     	; 0x5f8 <__divmodsi4_exit>
 5e6:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__negsi2>

000005ea <__divmodsi4_neg2>:
 5ea:	50 95       	com	r21
 5ec:	40 95       	com	r20
 5ee:	30 95       	com	r19
 5f0:	21 95       	neg	r18
 5f2:	3f 4f       	sbci	r19, 0xFF	; 255
 5f4:	4f 4f       	sbci	r20, 0xFF	; 255
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255

000005f8 <__divmodsi4_exit>:
 5f8:	08 95       	ret

000005fa <__negsi2>:
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	08 95       	ret

0000060a <__udivmodsi4>:
 60a:	a1 e2       	ldi	r26, 0x21	; 33
 60c:	1a 2e       	mov	r1, r26
 60e:	aa 1b       	sub	r26, r26
 610:	bb 1b       	sub	r27, r27
 612:	fd 01       	movw	r30, r26
 614:	0d c0       	rjmp	.+26     	; 0x630 <__udivmodsi4_ep>

00000616 <__udivmodsi4_loop>:
 616:	aa 1f       	adc	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	ee 1f       	adc	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	a2 17       	cp	r26, r18
 620:	b3 07       	cpc	r27, r19
 622:	e4 07       	cpc	r30, r20
 624:	f5 07       	cpc	r31, r21
 626:	20 f0       	brcs	.+8      	; 0x630 <__udivmodsi4_ep>
 628:	a2 1b       	sub	r26, r18
 62a:	b3 0b       	sbc	r27, r19
 62c:	e4 0b       	sbc	r30, r20
 62e:	f5 0b       	sbc	r31, r21

00000630 <__udivmodsi4_ep>:
 630:	66 1f       	adc	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a 94       	dec	r1
 63a:	69 f7       	brne	.-38     	; 0x616 <__udivmodsi4_loop>
 63c:	60 95       	com	r22
 63e:	70 95       	com	r23
 640:	80 95       	com	r24
 642:	90 95       	com	r25
 644:	9b 01       	movw	r18, r22
 646:	ac 01       	movw	r20, r24
 648:	bd 01       	movw	r22, r26
 64a:	cf 01       	movw	r24, r30
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
