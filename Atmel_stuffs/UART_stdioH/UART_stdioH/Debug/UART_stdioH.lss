
UART_stdioH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  000003ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090e  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ed  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bb  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ea e4       	ldi	r30, 0x4A	; 74
  80:	f3 e0       	ldi	r31, 0x03	; 3
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ae 30       	cpi	r26, 0x0E	; 14
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ae e0       	ldi	r26, 0x0E	; 14
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a4 31       	cpi	r26, 0x14	; 20
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  a2:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <UART_Init>:

#define F_CPU	16000000	// This definition tells to _delay_ms() that the CPU runs at 16MHz
#include <util/delay.h>		// This header contains the _delay_ms() function

void UART_Init()
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	// Write this function
	// See the datasheet on page 246 for hints and table 25-9.
	//---------------------------------
	//TODO:
	UCSR0A = 0b0;
  b2:	80 ec       	ldi	r24, 0xC0	; 192
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
	UBRR0 = 103;
  ba:	84 ec       	ldi	r24, 0xC4	; 196
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	27 e6       	ldi	r18, 0x67	; 103
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	31 83       	std	Z+1, r19	; 0x01
  c6:	20 83       	st	Z, r18
	// At first set the baud rate to 9600
	// The CPU clock frequency is 16MHz
	UCSR0C = (0 << USBS0);
  c8:	82 ec       	ldi	r24, 0xC2	; 194
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
	UCSR0C = 0b11;
  d0:	82 ec       	ldi	r24, 0xC2	; 194
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	23 e0       	ldi	r18, 0x03	; 3
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	UCSR0C |= (3 << UCSZ00);
  da:	82 ec       	ldi	r24, 0xC2	; 194
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	22 ec       	ldi	r18, 0xC2	; 194
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	26 60       	ori	r18, 0x06	; 6
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	//TODO:
	// Set the following frame format: 8N1

	//TODO:
	// Enable TX
	UCSR0B |= (1 << TXEN0);
  ec:	81 ec       	ldi	r24, 0xC1	; 193
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	21 ec       	ldi	r18, 0xC1	; 193
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	28 60       	ori	r18, 0x08	; 8
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	//TODO:
	// Enable RX
	UCSR0B |= (1 << RXEN0);
  fe:	81 ec       	ldi	r24, 0xC1	; 193
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	21 ec       	ldi	r18, 0xC1	; 193
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 61       	ori	r18, 0x10	; 16
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
}
 110:	00 00       	nop
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <UART_SendCharacter>:

void UART_SendCharacter(char character)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	1f 92       	push	r1
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	89 83       	std	Y+1, r24	; 0x01
	// Write this function, which can send a character through UART will polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for empty buffer
	while (!(UCSR0A & (1 << UDRE0)));
 124:	00 00       	nop
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	80 72       	andi	r24, 0x20	; 32
 134:	99 27       	eor	r25, r25
 136:	89 2b       	or	r24, r25
 138:	b1 f3       	breq	.-20     	; 0x126 <UART_SendCharacter+0xe>
	//TODO:
	// Put data to buffer
	UDR0 = character;
 13a:	86 ec       	ldi	r24, 0xC6	; 198
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	29 81       	ldd	r18, Y+1	; 0x01
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
}
 144:	00 00       	nop
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <UART_GetCharacter>:

char UART_GetCharacter()
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
	// Write this function, which waits for a character and returns when one is received
	// See page 249 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	//TODO:
	// Wait for data received
	while (!(UCSR0A & (1 << RXC0)));
 156:	00 00       	nop
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	d4 f7       	brge	.-12     	; 0x158 <UART_GetCharacter+0xa>
	//TODO:
	// Get data from buffer
	return (char)UDR0;
 164:	86 ec       	ldi	r24, 0xC6	; 198
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <main>:

int main(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	cb 51       	subi	r28, 0x1B	; 27
 17c:	d1 40       	sbci	r29, 0x01	; 1
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];

	//Don't forget to call the init function :)
	UART_Init();
 188:	0e 94 55 00 	call	0xaa	; 0xaa <UART_Init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 18c:	ce 01       	movw	r24, r28
 18e:	93 95       	inc	r25
 190:	2e e0       	ldi	r18, 0x0E	; 14
 192:	fc 01       	movw	r30, r24
 194:	32 2f       	mov	r19, r18
 196:	11 92       	st	Z+, r1
 198:	3a 95       	dec	r19
 19a:	e9 f7       	brne	.-6      	; 0x196 <main+0x24>
 19c:	ce 01       	movw	r24, r28
 19e:	93 95       	inc	r25
 1a0:	22 e0       	ldi	r18, 0x02	; 2
 1a2:	fc 01       	movw	r30, r24
 1a4:	23 83       	std	Z+3, r18	; 0x03
 1a6:	ce 01       	movw	r24, r28
 1a8:	93 95       	inc	r25
 1aa:	2c e8       	ldi	r18, 0x8C	; 140
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	31 87       	std	Z+9, r19	; 0x09
 1b2:	20 87       	std	Z+8, r18	; 0x08
	stdout = &UART_output;
 1b4:	ce 01       	movw	r24, r28
 1b6:	93 95       	inc	r25
 1b8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>
 1bc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 1c0:	ce 01       	movw	r24, r28
 1c2:	82 5f       	subi	r24, 0xF2	; 242
 1c4:	9e 4f       	sbci	r25, 0xFE	; 254
 1c6:	2e e0       	ldi	r18, 0x0E	; 14
 1c8:	fc 01       	movw	r30, r24
 1ca:	32 2f       	mov	r19, r18
 1cc:	11 92       	st	Z+, r1
 1ce:	3a 95       	dec	r19
 1d0:	e9 f7       	brne	.-6      	; 0x1cc <main+0x5a>
 1d2:	ce 01       	movw	r24, r28
 1d4:	82 5f       	subi	r24, 0xF2	; 242
 1d6:	9e 4f       	sbci	r25, 0xFE	; 254
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	fc 01       	movw	r30, r24
 1dc:	23 83       	std	Z+3, r18	; 0x03
 1de:	ce 01       	movw	r24, r28
 1e0:	82 5f       	subi	r24, 0xF2	; 242
 1e2:	9e 4f       	sbci	r25, 0xFE	; 254
 1e4:	27 ea       	ldi	r18, 0xA7	; 167
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	fc 01       	movw	r30, r24
 1ea:	33 87       	std	Z+11, r19	; 0x0b
 1ec:	22 87       	std	Z+10, r18	; 0x0a
	stdin = &UART_input;
 1ee:	ce 01       	movw	r24, r28
 1f0:	82 5f       	subi	r24, 0xF2	; 242
 1f2:	9e 4f       	sbci	r25, 0xFE	; 254
 1f4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 1f8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	//----- END OF STDIO IO BUFFER SETUP

	//TODO:
	// Try printf
	printf("test test...\n"); 
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 35 01 	call	0x26a	; 0x26a <puts>
	// Loop that runs forever
	while (1) {
		//TODO:
		// With gets and puts create a loopback, use the buffer variable!
	gets(buffer);
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 0b 01 	call	0x216	; 0x216 <gets>
	puts(buffer);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 35 01 	call	0x26a	; 0x26a <puts>

	}
 214:	f7 cf       	rjmp	.-18     	; 0x204 <main+0x92>

00000216 <gets>:
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
 222:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x1>
 226:	23 81       	ldd	r18, Z+3	; 0x03
 228:	20 fd       	sbrc	r18, 0
 22a:	03 c0       	rjmp	.+6      	; 0x232 <gets+0x1c>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	17 c0       	rjmp	.+46     	; 0x260 <gets+0x4a>
 232:	c9 2f       	mov	r28, r25
 234:	d8 2f       	mov	r29, r24
 236:	08 2f       	mov	r16, r24
 238:	19 2f       	mov	r17, r25
 23a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 23e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 242:	0e 94 65 01 	call	0x2ca	; 0x2ca <fgetc>
 246:	8f 3f       	cpi	r24, 0xFF	; 255
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	92 07       	cpc	r25, r18
 24c:	79 f3       	breq	.-34     	; 0x22c <gets+0x16>
 24e:	f8 01       	movw	r30, r16
 250:	81 93       	st	Z+, r24
 252:	8f 01       	movw	r16, r30
 254:	0a 97       	sbiw	r24, 0x0a	; 10
 256:	89 f7       	brne	.-30     	; 0x23a <gets+0x24>
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	10 82       	st	Z, r1
 25c:	8d 2f       	mov	r24, r29
 25e:	9c 2f       	mov	r25, r28
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <puts>:
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end+0x2>
 276:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x3>
 27a:	23 81       	ldd	r18, Z+3	; 0x03
 27c:	21 ff       	sbrs	r18, 1
 27e:	1b c0       	rjmp	.+54     	; 0x2b6 <puts+0x4c>
 280:	8c 01       	movw	r16, r24
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	f8 01       	movw	r30, r16
 288:	81 91       	ld	r24, Z+
 28a:	8f 01       	movw	r16, r30
 28c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end+0x2>
 290:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x3>
 294:	db 01       	movw	r26, r22
 296:	18 96       	adiw	r26, 0x08	; 8
 298:	ed 91       	ld	r30, X+
 29a:	fc 91       	ld	r31, X
 29c:	19 97       	sbiw	r26, 0x09	; 9
 29e:	88 23       	and	r24, r24
 2a0:	31 f0       	breq	.+12     	; 0x2ae <puts+0x44>
 2a2:	09 95       	icall
 2a4:	89 2b       	or	r24, r25
 2a6:	79 f3       	breq	.-34     	; 0x286 <puts+0x1c>
 2a8:	df ef       	ldi	r29, 0xFF	; 255
 2aa:	cf ef       	ldi	r28, 0xFF	; 255
 2ac:	ec cf       	rjmp	.-40     	; 0x286 <puts+0x1c>
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	09 95       	icall
 2b2:	89 2b       	or	r24, r25
 2b4:	19 f0       	breq	.+6      	; 0x2bc <puts+0x52>
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <puts+0x56>
 2bc:	8d 2f       	mov	r24, r29
 2be:	9c 2f       	mov	r25, r28
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

000002ca <fgetc>:
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ec 01       	movw	r28, r24
 2d0:	2b 81       	ldd	r18, Y+3	; 0x03
 2d2:	20 ff       	sbrs	r18, 0
 2d4:	33 c0       	rjmp	.+102    	; 0x33c <fgetc+0x72>
 2d6:	26 ff       	sbrs	r18, 6
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <fgetc+0x24>
 2da:	2f 7b       	andi	r18, 0xBF	; 191
 2dc:	2b 83       	std	Y+3, r18	; 0x03
 2de:	8e 81       	ldd	r24, Y+6	; 0x06
 2e0:	9f 81       	ldd	r25, Y+7	; 0x07
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	9f 83       	std	Y+7, r25	; 0x07
 2e6:	8e 83       	std	Y+6, r24	; 0x06
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	29 c0       	rjmp	.+82     	; 0x340 <fgetc+0x76>
 2ee:	22 ff       	sbrs	r18, 2
 2f0:	0f c0       	rjmp	.+30     	; 0x310 <fgetc+0x46>
 2f2:	e8 81       	ld	r30, Y
 2f4:	f9 81       	ldd	r31, Y+1	; 0x01
 2f6:	80 81       	ld	r24, Z
 2f8:	08 2e       	mov	r0, r24
 2fa:	00 0c       	add	r0, r0
 2fc:	99 0b       	sbc	r25, r25
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	19 f4       	brne	.+6      	; 0x308 <fgetc+0x3e>
 302:	20 62       	ori	r18, 0x20	; 32
 304:	2b 83       	std	Y+3, r18	; 0x03
 306:	1a c0       	rjmp	.+52     	; 0x33c <fgetc+0x72>
 308:	31 96       	adiw	r30, 0x01	; 1
 30a:	f9 83       	std	Y+1, r31	; 0x01
 30c:	e8 83       	st	Y, r30
 30e:	0e c0       	rjmp	.+28     	; 0x32c <fgetc+0x62>
 310:	ea 85       	ldd	r30, Y+10	; 0x0a
 312:	fb 85       	ldd	r31, Y+11	; 0x0b
 314:	09 95       	icall
 316:	97 ff       	sbrs	r25, 7
 318:	09 c0       	rjmp	.+18     	; 0x32c <fgetc+0x62>
 31a:	2b 81       	ldd	r18, Y+3	; 0x03
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	11 f0       	breq	.+4      	; 0x324 <fgetc+0x5a>
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	01 c0       	rjmp	.+2      	; 0x326 <fgetc+0x5c>
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	82 2b       	or	r24, r18
 328:	8b 83       	std	Y+3, r24	; 0x03
 32a:	08 c0       	rjmp	.+16     	; 0x33c <fgetc+0x72>
 32c:	2e 81       	ldd	r18, Y+6	; 0x06
 32e:	3f 81       	ldd	r19, Y+7	; 0x07
 330:	2f 5f       	subi	r18, 0xFF	; 255
 332:	3f 4f       	sbci	r19, 0xFF	; 255
 334:	3f 83       	std	Y+7, r19	; 0x07
 336:	2e 83       	std	Y+6, r18	; 0x06
 338:	99 27       	eor	r25, r25
 33a:	02 c0       	rjmp	.+4      	; 0x340 <fgetc+0x76>
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	9f ef       	ldi	r25, 0xFF	; 255
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
