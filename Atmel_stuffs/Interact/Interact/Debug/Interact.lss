
Interact.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040d  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7c:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <init>:

void init()
{
	// Set the prescaler to 1024 division. See at the TC0 control register in the datasheet!
	// With this you also set the clock source to CLK_io and you will also turn on the timer!
	TCCR0B |= 0b00000101;
  84:	85 b5       	in	r24, 0x25	; 37
  86:	85 60       	ori	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
  8a:	16 bc       	out	0x26, r1	; 38

	// Set the PB5 LED pin to output
	DDRB = 1 << 5;
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	84 b9       	out	0x04, r24	; 4
  90:	08 95       	ret

00000092 <custom_delay>:
}

void custom_delay(int ms){
	for(int i = 0; i < ms; i++){
  92:	18 16       	cp	r1, r24
  94:	19 06       	cpc	r1, r25
  96:	6c f4       	brge	.+26     	; 0xb2 <custom_delay+0x20>
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	e9 ef       	ldi	r30, 0xF9	; 249
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <custom_delay+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <custom_delay+0x14>
  a6:	00 00       	nop
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	3f 4f       	sbci	r19, 0xFF	; 255
  ac:	82 17       	cp	r24, r18
  ae:	93 07       	cpc	r25, r19
  b0:	a9 f7       	brne	.-22     	; 0x9c <custom_delay+0xa>
  b2:	08 95       	ret

000000b4 <main>:
}

int main(void)
{
	int delay_time = 990000;
	DDRD = 0b00001111;
  b4:	8f e0       	ldi	r24, 0x0F	; 15
  b6:	8a b9       	out	0x0a, r24	; 10
	uint8_t counter = 0;
	//const uint8_t cntr_max = 30;
	// Don't forget to call the init function!
	init();
  b8:	0e 94 42 00 	call	0x84	; 0x84 <init>
	TIFR0 |= 1;
	}
	if (counter > 40){
		//PORTB ^= 1 << PORTB5;
		//custom_delay(delay_time);
		PORTD ^= 1 << PORTD0;
  bc:	01 e0       	ldi	r16, 0x01	; 1
		custom_delay(delay_time);
		PORTD ^= 1 << PORTD1;
  be:	12 e0       	ldi	r17, 0x02	; 2
		custom_delay(delay_time);
		PORTD ^= 1 << PORTD2;
  c0:	d4 e0       	ldi	r29, 0x04	; 4
		custom_delay(delay_time);
		PORTD ^= 1 << PORTD3;
  c2:	c8 e0       	ldi	r28, 0x08	; 8
		_delay_ms(1);
	}
}

int main(void)
{
  c4:	80 e0       	ldi	r24, 0x00	; 0

	while (1)
	{
		// If TC0 counter overflow occurred (TOV0 flag is set) toggle the LED and write "1" to that flag
		// (this will clear it, it's confusing, but this is how it works)
if(TIFR0 & 1){
  c6:	a8 9b       	sbis	0x15, 0	; 21
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x1a>
	counter++;
  ca:	8f 5f       	subi	r24, 0xFF	; 255
	TIFR0 |= 1;
  cc:	a8 9a       	sbi	0x15, 0	; 21
	}
	if (counter > 40){
  ce:	89 32       	cpi	r24, 0x29	; 41
  d0:	d0 f3       	brcs	.-12     	; 0xc6 <main+0x12>
		//PORTB ^= 1 << PORTB5;
		//custom_delay(delay_time);
		PORTD ^= 1 << PORTD0;
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	80 27       	eor	r24, r16
  d6:	8b b9       	out	0x0b, r24	; 11
		custom_delay(delay_time);
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	9b e1       	ldi	r25, 0x1B	; 27
  dc:	0e 94 49 00 	call	0x92	; 0x92 <custom_delay>
		PORTD ^= 1 << PORTD1;
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	81 27       	eor	r24, r17
  e4:	8b b9       	out	0x0b, r24	; 11
		custom_delay(delay_time);
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	9b e1       	ldi	r25, 0x1B	; 27
  ea:	0e 94 49 00 	call	0x92	; 0x92 <custom_delay>
		PORTD ^= 1 << PORTD2;
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8d 27       	eor	r24, r29
  f2:	8b b9       	out	0x0b, r24	; 11
		custom_delay(delay_time);
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	9b e1       	ldi	r25, 0x1B	; 27
  f8:	0e 94 49 00 	call	0x92	; 0x92 <custom_delay>
		PORTD ^= 1 << PORTD3;
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8c 27       	eor	r24, r28
 100:	8b b9       	out	0x0b, r24	; 11
 102:	e0 cf       	rjmp	.-64     	; 0xc4 <main+0x10>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
